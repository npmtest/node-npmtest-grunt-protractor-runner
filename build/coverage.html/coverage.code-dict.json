{"/home/travis/build/npmtest/node-npmtest-grunt-protractor-runner/test.js":"/* istanbul instrument in package npmtest_grunt_protractor_runner */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-protractor-runner/lib.npmtest_grunt_protractor_runner.js":"/* istanbul instrument in package npmtest_grunt_protractor_runner */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_protractor_runner = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_protractor_runner = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-protractor-runner/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-protractor-runner && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_protractor_runner */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_protractor_runner\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_protractor_runner.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_protractor_runner.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_protractor_runner.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_protractor_runner.__dirname + '/lib.npmtest_grunt_protractor_runner.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-protractor-runner/node_modules/grunt-protractor-runner/Gruntfile.js":"/*\r\n * grunt-protractor-runner\r\n * https://github.com/teerapap/grunt-protractor-runner\r\n *\r\n * Copyright (c) 2013 Teerapap Changwichukarn\r\n * Licensed under the MIT license.\r\n */\r\n\r\n'use strict';\r\n\r\nmodule.exports = function(grunt) {\r\n\r\n  // Project configuration.\r\n  grunt.initConfig({\r\n    jshint: {\r\n      all: [\r\n        'Gruntfile.js',\r\n        'tasks/*.js',\r\n        '<%= nodeunit.tests %>',\r\n      ],\r\n      options: {\r\n        jshintrc: '.jshintrc',\r\n      },\r\n    },\r\n\r\n    // Before generating any new files, remove any previously-created files.\r\n    clean: {\r\n      tests: ['tmp'],\r\n    },\r\n\r\n    // Configuration to be run (and then tested).\r\n    protractor: {\r\n      options: {\r\n        keepAlive: false\r\n      },\r\n      testTargetConfigFile: {\r\n        configFile:\"test/testConf.js\",\r\n        options: {\r\n          webdriverManagerUpdate: true\r\n        }\r\n      },\r\n      testKeepAliveOnFailedTest: {\r\n        configFile:\"test/testConf.js\",\r\n        options: {\r\n          keepAlive: true,\r\n          args: {\r\n            specs:[\"test/failedTest.js\"],\r\n          }\r\n        }\r\n      },\r\n      testArgs1: {\r\n        configFile:\"test/testConf.js\",\r\n        options: {\r\n          args: {\r\n            params: {\r\n              number: 1,\r\n              bool_true: true,\r\n              bool_false: false,\r\n              str: \"string\",\r\n              nil: null, // Null is not supported.\r\n              obj: {\r\n                array: [1, 2, 3],\r\n                undef: undefined\r\n              }\r\n            },\r\n            capabilities: {\r\n              'browserName': 'chrome'\r\n            },\r\n            rootElement:\"body\",\r\n            specs:[\"test/argsTest.js\"],\r\n            verbose:true\r\n          }\r\n        }\r\n      },\r\n      testArgsSuiteArray: {\r\n        configFile:\"test/testConf.js\",\r\n        options: {\r\n          args: {\r\n            capabilities: {\r\n              'browserName': 'chrome'\r\n            },\r\n            suite: ['login', 'logout'],\r\n            verbose:true\r\n          }\r\n        }\r\n      },\r\n      testArgSuiteString: {\r\n        configFile:\"test/testConf.js\",\r\n        options: {\r\n          args: {\r\n            capabilities: {\r\n              'browserName': 'chrome'\r\n            },\r\n            suite: 'login',\r\n            verbose:true\r\n          }\r\n        }\r\n      },\r\n    },\r\n\r\n    // Unit tests.\r\n    nodeunit: {\r\n      tests: ['test/*_test.js'],\r\n    },\r\n\r\n  });\r\n\r\n  // Actually load this plugin's task(s).\r\n  grunt.loadTasks('tasks');\r\n\r\n  // These plugins provide necessary tasks.\r\n  grunt.loadNpmTasks('grunt-contrib-jshint');\r\n  grunt.loadNpmTasks('grunt-contrib-clean');\r\n  grunt.loadNpmTasks('grunt-contrib-nodeunit');\r\n\r\n  // Whenever the \"test\" task is run, first clean the \"tmp\" dir, then run this\r\n  // plugin's task(s), then test the result.\r\n  grunt.registerTask('test', ['clean', 'protractor', 'nodeunit']);\r\n\r\n  // By default, lint and run all tests.\r\n  grunt.registerTask('default', ['jshint', 'test']);\r\n\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-grunt-protractor-runner/node_modules/grunt-protractor-runner/tasks/protractor_runner.js":"/*\r\n * grunt-protractor-runner\r\n * https://github.com/teerapap/grunt-protractor-runner\r\n *\r\n * Copyright (c) 2013 Teerapap Changwichukarn\r\n * Licensed under the MIT license.\r\n */\r\n\r\n'use strict';\r\n\r\nvar util = require('util');\r\nvar path = require('path');\r\nvar fs = require('fs');\r\nvar split = require('split');\r\nvar through2 = require('through2');\r\n\r\nmodule.exports = function(grunt) {\r\n\r\n  grunt.registerMultiTask('protractor', 'A grunt task to run protractor.', function() {\r\n\r\n    // '.../node_modules/protractor/lib/protractor.js'\r\n    var protractorMainPath = require.resolve('protractor');\r\n    // '.../node_modules/protractor/bin/protractor'\r\n    var protractorBinPath = path.resolve(protractorMainPath, '../../bin/protractor');\r\n    // '.../node_modules/protractor/bin/webdriver-manager'\r\n    var webdriverManagerPath = path.resolve(protractorMainPath, '../../bin/webdriver-manager');\r\n\r\n    // Merge task-specific and/or target-specific options with these defaults.\r\n    var opts = this.options({\r\n      keepAlive: false,\r\n      noColor: false,\r\n      debug: false,\r\n      nodeBin: 'node',\r\n      args: {},\r\n      output: false,\r\n      outputOptions: {},\r\n      webdriverManagerUpdate: false\r\n    });\r\n\r\n    // configFile is a special property which need not to be in options{} object.\r\n    if (!grunt.util._.isUndefined(this.data.configFile)) {\r\n      opts.configFile = this.data.configFile;\r\n    }\r\n\r\n    grunt.verbose.writeln(\"Options: \" + util.inspect(opts));\r\n\r\n    var keepAlive = opts['keepAlive'];\r\n    var strArgs = [\"seleniumAddress\", \"seleniumServerJar\", \"seleniumPort\", \"baseUrl\", \"rootElement\", \"browser\", \"chromeDriver\", \"chromeOnly\", \"directConnect\", \"sauceUser\", \"sauceKey\", \"sauceSeleniumAddress\", \"framework\", \"frameworkPath\", \"beforeLaunch\", \"onPrepare\", \"webDriverProxy\"];\r\n    var listArgs = [\"specs\", \"exclude\", \"suite\"];\r\n    var boolArgs = [\"includeStackTrace\", \"verbose\"];\r\n    var objectArgs = [\"params\", \"capabilities\", \"cucumberOpts\", \"mochaOpts\"];\r\n\r\n    var cmd = [protractorBinPath];\r\n    if (!grunt.util._.isUndefined(opts.configFile)){\r\n      cmd.push(opts.configFile);\r\n    }\r\n    var args = process.execArgv.concat(cmd);\r\n    if (opts.noColor){\r\n      args.push('--no-jasmineNodeOpts.showColors');\r\n    }\r\n    if (!grunt.util._.isUndefined(opts.debug) && opts.debug === true){\r\n      args.splice(1,0,'debug');\r\n    }\r\n\r\n    // Iterate over all supported arguments.\r\n    strArgs.forEach(function(a) {\r\n      if (a in opts.args || grunt.option(a)) {\r\n        args.push('--'+a, grunt.option(a) || opts.args[a]);\r\n      }\r\n    });\r\n    listArgs.forEach(function(a) {\r\n      if (a in opts.args || grunt.option(a)) {\r\n        var arg = opts.args[a];\r\n        if (arg instanceof Array) {\r\n          arg = arg.join(\",\");\r\n        }\r\n        args.push('--'+a,  grunt.option(a) || arg);\r\n      }\r\n    });\r\n    boolArgs.forEach(function(a) {\r\n      if (a in opts.args || grunt.option(a)) {\r\n        args.push('--'+a);\r\n      }\r\n    });\r\n\r\n    // Convert [object] to --[object].key1 val1 --[object].key2 val2 ....\r\n    objectArgs.forEach(function(a) {\r\n      (function convert(prefix, obj, args) {\r\n        if (typeof obj === 'string'){\r\n          obj = JSON.parse(obj);\r\n        }\r\n        for (var key in obj) {\r\n          var val = obj[key];\r\n          var type = typeof obj[key];\r\n          if (type === \"object\") {\r\n            if (Array.isArray(val)) {\r\n              // Add duplicates --[object].key val1 --[object].key val2 ...\r\n              for (var i=0;i<val.length;i++) {\r\n                args.push(prefix+\".\"+key, val[i]);\r\n              }\r\n            } else {\r\n              // Dig deeper\r\n              convert(prefix+\".\"+key, val, args);\r\n            }\r\n          } else if (type === \"undefined\" || type === \"function\") {\r\n            // Skip these types\r\n          } else if (type === \"boolean\") {\r\n            // Add --[object].key\r\n\t    if (val) {\r\n\t\targs.push(prefix+\".\"+key);\r\n\t    } else {\r\n\t\targs.push(\"--no\"+prefix.substring(1)+\".\"+key);\r\n\t    }\r\n          } else {\r\n            // Add --[object].key value\r\n            args.push(prefix+\".\"+key, val);\r\n          }\r\n        }\r\n      })(\"--\" + a, grunt.option(a) || opts.args[a], args);\r\n    });\r\n\r\n\r\n    // Spawn protractor command\r\n    var done = this.async();\r\n    var startProtractor = function(){\r\n      grunt.verbose.writeln(\"Spawn node with arguments: \" + args.join(\" \"));\r\n      var child = grunt.util.spawn({\r\n          cmd: opts.nodeBin,\r\n          args: args,\r\n          opts: {\r\n            stdio:'pipe'\r\n          }\r\n        },\r\n        function(error, result, code) {\r\n          if (error) {\r\n            grunt.log.error(String(result));\r\n            if(code === 1 && keepAlive) {\r\n              // Test fails but do not want to stop the grunt process.\r\n              grunt.log.oklns(\"Test failed but keep the grunt process alive.\");\r\n            } else {\r\n              // Test fails and want to stop the grunt process,\r\n              // or protractor exited with other reason.\r\n              grunt.warn('Tests failed, protractor exited with code: '+code, code);\r\n            }\r\n          }\r\n          done();\r\n          done = null;\r\n        }\r\n      );\r\n      try {\r\n        process.stdin.pipe(child.stdin);\r\n      }\r\n      catch (e) {\r\n        grunt.log.debug(\"Non-fatal: stdin cannot be piped in this shell\");\r\n      }\r\n      child.stdout.pipe(process.stdout);\r\n      child.stderr.pipe(process.stderr);\r\n\r\n      // Write the result in the output file\r\n      if (!grunt.util._.isUndefined(opts.output) && opts.output !== false) {\r\n\r\n        grunt.log.writeln(\"Output test result to: \" + opts.output);\r\n\r\n        grunt.file.mkdir(path.dirname(opts.output));\r\n\r\n        child.stdout\r\n          .pipe(split())\r\n          .pipe(through2(function (chunk, encoding, callback) {\r\n            if ((/^Using the selenium server at/).test(chunk.toString())) {\r\n              // skip\r\n            }\r\n            else {\r\n              this.push(chunk + '\\n');\r\n            }\r\n            callback();\r\n          }))\r\n          .pipe(fs.createWriteStream(opts.output, opts.outputOptions));\r\n      }\r\n    };\r\n\r\n    if (opts.webdriverManagerUpdate) {\r\n      grunt.log.writeln('webdriver-manager path: ' + webdriverManagerPath);\r\n      grunt.util.spawn({\r\n        cmd: opts.nodeBin,\r\n        args: [webdriverManagerPath, 'update'],\r\n        opts: {\r\n          stdio: 'inherit'\r\n        }\r\n      }, startProtractor);\r\n    } else {\r\n      startProtractor();\r\n    }\r\n  });\r\n\r\n};\r\n"}